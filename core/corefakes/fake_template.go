// Code generated by counterfeiter. DO NOT EDIT.
package corefakes

import (
	"io/fs"
	"sync"

	"github.com/ccremer/greposync/core"
)

type FakeTemplate struct {
	GetFileModeStub        func() fs.FileMode
	getFileModeMutex       sync.RWMutex
	getFileModeArgsForCall []struct {
	}
	getFileModeReturns struct {
		result1 fs.FileMode
	}
	getFileModeReturnsOnCall map[int]struct {
		result1 fs.FileMode
	}
	GetRelativePathStub        func() string
	getRelativePathMutex       sync.RWMutex
	getRelativePathArgsForCall []struct {
	}
	getRelativePathReturns struct {
		result1 string
	}
	getRelativePathReturnsOnCall map[int]struct {
		result1 string
	}
	RenderStub        func(core.Values) (string, error)
	renderMutex       sync.RWMutex
	renderArgsForCall []struct {
		arg1 core.Values
	}
	renderReturns struct {
		result1 string
		result2 error
	}
	renderReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTemplate) GetFileMode() fs.FileMode {
	fake.getFileModeMutex.Lock()
	ret, specificReturn := fake.getFileModeReturnsOnCall[len(fake.getFileModeArgsForCall)]
	fake.getFileModeArgsForCall = append(fake.getFileModeArgsForCall, struct {
	}{})
	stub := fake.GetFileModeStub
	fakeReturns := fake.getFileModeReturns
	fake.recordInvocation("GetFileMode", []interface{}{})
	fake.getFileModeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTemplate) GetFileModeCallCount() int {
	fake.getFileModeMutex.RLock()
	defer fake.getFileModeMutex.RUnlock()
	return len(fake.getFileModeArgsForCall)
}

func (fake *FakeTemplate) GetFileModeCalls(stub func() fs.FileMode) {
	fake.getFileModeMutex.Lock()
	defer fake.getFileModeMutex.Unlock()
	fake.GetFileModeStub = stub
}

func (fake *FakeTemplate) GetFileModeReturns(result1 fs.FileMode) {
	fake.getFileModeMutex.Lock()
	defer fake.getFileModeMutex.Unlock()
	fake.GetFileModeStub = nil
	fake.getFileModeReturns = struct {
		result1 fs.FileMode
	}{result1}
}

func (fake *FakeTemplate) GetFileModeReturnsOnCall(i int, result1 fs.FileMode) {
	fake.getFileModeMutex.Lock()
	defer fake.getFileModeMutex.Unlock()
	fake.GetFileModeStub = nil
	if fake.getFileModeReturnsOnCall == nil {
		fake.getFileModeReturnsOnCall = make(map[int]struct {
			result1 fs.FileMode
		})
	}
	fake.getFileModeReturnsOnCall[i] = struct {
		result1 fs.FileMode
	}{result1}
}

func (fake *FakeTemplate) GetRelativePath() string {
	fake.getRelativePathMutex.Lock()
	ret, specificReturn := fake.getRelativePathReturnsOnCall[len(fake.getRelativePathArgsForCall)]
	fake.getRelativePathArgsForCall = append(fake.getRelativePathArgsForCall, struct {
	}{})
	stub := fake.GetRelativePathStub
	fakeReturns := fake.getRelativePathReturns
	fake.recordInvocation("GetRelativePath", []interface{}{})
	fake.getRelativePathMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTemplate) GetRelativePathCallCount() int {
	fake.getRelativePathMutex.RLock()
	defer fake.getRelativePathMutex.RUnlock()
	return len(fake.getRelativePathArgsForCall)
}

func (fake *FakeTemplate) GetRelativePathCalls(stub func() string) {
	fake.getRelativePathMutex.Lock()
	defer fake.getRelativePathMutex.Unlock()
	fake.GetRelativePathStub = stub
}

func (fake *FakeTemplate) GetRelativePathReturns(result1 string) {
	fake.getRelativePathMutex.Lock()
	defer fake.getRelativePathMutex.Unlock()
	fake.GetRelativePathStub = nil
	fake.getRelativePathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTemplate) GetRelativePathReturnsOnCall(i int, result1 string) {
	fake.getRelativePathMutex.Lock()
	defer fake.getRelativePathMutex.Unlock()
	fake.GetRelativePathStub = nil
	if fake.getRelativePathReturnsOnCall == nil {
		fake.getRelativePathReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getRelativePathReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTemplate) Render(arg1 core.Values) (string, error) {
	fake.renderMutex.Lock()
	ret, specificReturn := fake.renderReturnsOnCall[len(fake.renderArgsForCall)]
	fake.renderArgsForCall = append(fake.renderArgsForCall, struct {
		arg1 core.Values
	}{arg1})
	stub := fake.RenderStub
	fakeReturns := fake.renderReturns
	fake.recordInvocation("Render", []interface{}{arg1})
	fake.renderMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTemplate) RenderCallCount() int {
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	return len(fake.renderArgsForCall)
}

func (fake *FakeTemplate) RenderCalls(stub func(core.Values) (string, error)) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = stub
}

func (fake *FakeTemplate) RenderArgsForCall(i int) core.Values {
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	argsForCall := fake.renderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTemplate) RenderReturns(result1 string, result2 error) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = nil
	fake.renderReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTemplate) RenderReturnsOnCall(i int, result1 string, result2 error) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = nil
	if fake.renderReturnsOnCall == nil {
		fake.renderReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.renderReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTemplate) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getFileModeMutex.RLock()
	defer fake.getFileModeMutex.RUnlock()
	fake.getRelativePathMutex.RLock()
	defer fake.getRelativePathMutex.RUnlock()
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTemplate) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ core.Template = new(FakeTemplate)

// Code generated by counterfeiter. DO NOT EDIT.
package corefakes

import (
	"sync"

	"github.com/ccremer/greposync/core"
)

type FakeManagedRepoProvider struct {
	GetSupportedGitHostingProvidersStub        func() map[core.GitHostingProvider]core.GitHostingFacade
	getSupportedGitHostingProvidersMutex       sync.RWMutex
	getSupportedGitHostingProvidersArgsForCall []struct {
	}
	getSupportedGitHostingProvidersReturns struct {
		result1 map[core.GitHostingProvider]core.GitHostingFacade
	}
	getSupportedGitHostingProvidersReturnsOnCall map[int]struct {
		result1 map[core.GitHostingProvider]core.GitHostingFacade
	}
	LoadManagedRepositoriesStub        func() ([]core.GitRepositoryFacade, error)
	loadManagedRepositoriesMutex       sync.RWMutex
	loadManagedRepositoriesArgsForCall []struct {
	}
	loadManagedRepositoriesReturns struct {
		result1 []core.GitRepositoryFacade
		result2 error
	}
	loadManagedRepositoriesReturnsOnCall map[int]struct {
		result1 []core.GitRepositoryFacade
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManagedRepoProvider) GetSupportedGitHostingProviders() map[core.GitHostingProvider]core.GitHostingFacade {
	fake.getSupportedGitHostingProvidersMutex.Lock()
	ret, specificReturn := fake.getSupportedGitHostingProvidersReturnsOnCall[len(fake.getSupportedGitHostingProvidersArgsForCall)]
	fake.getSupportedGitHostingProvidersArgsForCall = append(fake.getSupportedGitHostingProvidersArgsForCall, struct {
	}{})
	stub := fake.GetSupportedGitHostingProvidersStub
	fakeReturns := fake.getSupportedGitHostingProvidersReturns
	fake.recordInvocation("GetSupportedGitHostingProviders", []interface{}{})
	fake.getSupportedGitHostingProvidersMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManagedRepoProvider) GetSupportedGitHostingProvidersCallCount() int {
	fake.getSupportedGitHostingProvidersMutex.RLock()
	defer fake.getSupportedGitHostingProvidersMutex.RUnlock()
	return len(fake.getSupportedGitHostingProvidersArgsForCall)
}

func (fake *FakeManagedRepoProvider) GetSupportedGitHostingProvidersCalls(stub func() map[core.GitHostingProvider]core.GitHostingFacade) {
	fake.getSupportedGitHostingProvidersMutex.Lock()
	defer fake.getSupportedGitHostingProvidersMutex.Unlock()
	fake.GetSupportedGitHostingProvidersStub = stub
}

func (fake *FakeManagedRepoProvider) GetSupportedGitHostingProvidersReturns(result1 map[core.GitHostingProvider]core.GitHostingFacade) {
	fake.getSupportedGitHostingProvidersMutex.Lock()
	defer fake.getSupportedGitHostingProvidersMutex.Unlock()
	fake.GetSupportedGitHostingProvidersStub = nil
	fake.getSupportedGitHostingProvidersReturns = struct {
		result1 map[core.GitHostingProvider]core.GitHostingFacade
	}{result1}
}

func (fake *FakeManagedRepoProvider) GetSupportedGitHostingProvidersReturnsOnCall(i int, result1 map[core.GitHostingProvider]core.GitHostingFacade) {
	fake.getSupportedGitHostingProvidersMutex.Lock()
	defer fake.getSupportedGitHostingProvidersMutex.Unlock()
	fake.GetSupportedGitHostingProvidersStub = nil
	if fake.getSupportedGitHostingProvidersReturnsOnCall == nil {
		fake.getSupportedGitHostingProvidersReturnsOnCall = make(map[int]struct {
			result1 map[core.GitHostingProvider]core.GitHostingFacade
		})
	}
	fake.getSupportedGitHostingProvidersReturnsOnCall[i] = struct {
		result1 map[core.GitHostingProvider]core.GitHostingFacade
	}{result1}
}

func (fake *FakeManagedRepoProvider) LoadManagedRepositories() ([]core.GitRepositoryFacade, error) {
	fake.loadManagedRepositoriesMutex.Lock()
	ret, specificReturn := fake.loadManagedRepositoriesReturnsOnCall[len(fake.loadManagedRepositoriesArgsForCall)]
	fake.loadManagedRepositoriesArgsForCall = append(fake.loadManagedRepositoriesArgsForCall, struct {
	}{})
	stub := fake.LoadManagedRepositoriesStub
	fakeReturns := fake.loadManagedRepositoriesReturns
	fake.recordInvocation("LoadManagedRepositories", []interface{}{})
	fake.loadManagedRepositoriesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManagedRepoProvider) LoadManagedRepositoriesCallCount() int {
	fake.loadManagedRepositoriesMutex.RLock()
	defer fake.loadManagedRepositoriesMutex.RUnlock()
	return len(fake.loadManagedRepositoriesArgsForCall)
}

func (fake *FakeManagedRepoProvider) LoadManagedRepositoriesCalls(stub func() ([]core.GitRepositoryFacade, error)) {
	fake.loadManagedRepositoriesMutex.Lock()
	defer fake.loadManagedRepositoriesMutex.Unlock()
	fake.LoadManagedRepositoriesStub = stub
}

func (fake *FakeManagedRepoProvider) LoadManagedRepositoriesReturns(result1 []core.GitRepositoryFacade, result2 error) {
	fake.loadManagedRepositoriesMutex.Lock()
	defer fake.loadManagedRepositoriesMutex.Unlock()
	fake.LoadManagedRepositoriesStub = nil
	fake.loadManagedRepositoriesReturns = struct {
		result1 []core.GitRepositoryFacade
		result2 error
	}{result1, result2}
}

func (fake *FakeManagedRepoProvider) LoadManagedRepositoriesReturnsOnCall(i int, result1 []core.GitRepositoryFacade, result2 error) {
	fake.loadManagedRepositoriesMutex.Lock()
	defer fake.loadManagedRepositoriesMutex.Unlock()
	fake.LoadManagedRepositoriesStub = nil
	if fake.loadManagedRepositoriesReturnsOnCall == nil {
		fake.loadManagedRepositoriesReturnsOnCall = make(map[int]struct {
			result1 []core.GitRepositoryFacade
			result2 error
		})
	}
	fake.loadManagedRepositoriesReturnsOnCall[i] = struct {
		result1 []core.GitRepositoryFacade
		result2 error
	}{result1, result2}
}

func (fake *FakeManagedRepoProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getSupportedGitHostingProvidersMutex.RLock()
	defer fake.getSupportedGitHostingProvidersMutex.RUnlock()
	fake.loadManagedRepositoriesMutex.RLock()
	defer fake.loadManagedRepositoriesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManagedRepoProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ core.ManagedRepoProvider = new(FakeManagedRepoProvider)

// Code generated by counterfeiter. DO NOT EDIT.
package corefakes

import (
	"sync"

	"github.com/ccremer/greposync/core"
)

type FakeGitRepositoryFacade struct {
	GetConfigStub        func() core.GitRepositoryConfig
	getConfigMutex       sync.RWMutex
	getConfigArgsForCall []struct {
	}
	getConfigReturns struct {
		result1 core.GitRepositoryConfig
	}
	getConfigReturnsOnCall map[int]struct {
		result1 core.GitRepositoryConfig
	}
	GetLabelsStub        func() []core.GitRepositoryLabel
	getLabelsMutex       sync.RWMutex
	getLabelsArgsForCall []struct {
	}
	getLabelsReturns struct {
		result1 []core.GitRepositoryLabel
	}
	getLabelsReturnsOnCall map[int]struct {
		result1 []core.GitRepositoryLabel
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGitRepositoryFacade) GetConfig() core.GitRepositoryConfig {
	fake.getConfigMutex.Lock()
	ret, specificReturn := fake.getConfigReturnsOnCall[len(fake.getConfigArgsForCall)]
	fake.getConfigArgsForCall = append(fake.getConfigArgsForCall, struct {
	}{})
	stub := fake.GetConfigStub
	fakeReturns := fake.getConfigReturns
	fake.recordInvocation("GetConfig", []interface{}{})
	fake.getConfigMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGitRepositoryFacade) GetConfigCallCount() int {
	fake.getConfigMutex.RLock()
	defer fake.getConfigMutex.RUnlock()
	return len(fake.getConfigArgsForCall)
}

func (fake *FakeGitRepositoryFacade) GetConfigCalls(stub func() core.GitRepositoryConfig) {
	fake.getConfigMutex.Lock()
	defer fake.getConfigMutex.Unlock()
	fake.GetConfigStub = stub
}

func (fake *FakeGitRepositoryFacade) GetConfigReturns(result1 core.GitRepositoryConfig) {
	fake.getConfigMutex.Lock()
	defer fake.getConfigMutex.Unlock()
	fake.GetConfigStub = nil
	fake.getConfigReturns = struct {
		result1 core.GitRepositoryConfig
	}{result1}
}

func (fake *FakeGitRepositoryFacade) GetConfigReturnsOnCall(i int, result1 core.GitRepositoryConfig) {
	fake.getConfigMutex.Lock()
	defer fake.getConfigMutex.Unlock()
	fake.GetConfigStub = nil
	if fake.getConfigReturnsOnCall == nil {
		fake.getConfigReturnsOnCall = make(map[int]struct {
			result1 core.GitRepositoryConfig
		})
	}
	fake.getConfigReturnsOnCall[i] = struct {
		result1 core.GitRepositoryConfig
	}{result1}
}

func (fake *FakeGitRepositoryFacade) GetLabels() []core.GitRepositoryLabel {
	fake.getLabelsMutex.Lock()
	ret, specificReturn := fake.getLabelsReturnsOnCall[len(fake.getLabelsArgsForCall)]
	fake.getLabelsArgsForCall = append(fake.getLabelsArgsForCall, struct {
	}{})
	stub := fake.GetLabelsStub
	fakeReturns := fake.getLabelsReturns
	fake.recordInvocation("GetLabels", []interface{}{})
	fake.getLabelsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGitRepositoryFacade) GetLabelsCallCount() int {
	fake.getLabelsMutex.RLock()
	defer fake.getLabelsMutex.RUnlock()
	return len(fake.getLabelsArgsForCall)
}

func (fake *FakeGitRepositoryFacade) GetLabelsCalls(stub func() []core.GitRepositoryLabel) {
	fake.getLabelsMutex.Lock()
	defer fake.getLabelsMutex.Unlock()
	fake.GetLabelsStub = stub
}

func (fake *FakeGitRepositoryFacade) GetLabelsReturns(result1 []core.GitRepositoryLabel) {
	fake.getLabelsMutex.Lock()
	defer fake.getLabelsMutex.Unlock()
	fake.GetLabelsStub = nil
	fake.getLabelsReturns = struct {
		result1 []core.GitRepositoryLabel
	}{result1}
}

func (fake *FakeGitRepositoryFacade) GetLabelsReturnsOnCall(i int, result1 []core.GitRepositoryLabel) {
	fake.getLabelsMutex.Lock()
	defer fake.getLabelsMutex.Unlock()
	fake.GetLabelsStub = nil
	if fake.getLabelsReturnsOnCall == nil {
		fake.getLabelsReturnsOnCall = make(map[int]struct {
			result1 []core.GitRepositoryLabel
		})
	}
	fake.getLabelsReturnsOnCall[i] = struct {
		result1 []core.GitRepositoryLabel
	}{result1}
}

func (fake *FakeGitRepositoryFacade) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getConfigMutex.RLock()
	defer fake.getConfigMutex.RUnlock()
	fake.getLabelsMutex.RLock()
	defer fake.getLabelsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGitRepositoryFacade) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ core.GitRepositoryFacade = new(FakeGitRepositoryFacade)

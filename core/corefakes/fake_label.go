// Code generated by counterfeiter. DO NOT EDIT.
package corefakes

import (
	"sync"

	"github.com/ccremer/greposync/core"
)

type FakeLabel struct {
	DeleteStub        func() (bool, error)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
	}
	deleteReturns struct {
		result1 bool
		result2 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	EnsureStub        func() (bool, error)
	ensureMutex       sync.RWMutex
	ensureArgsForCall []struct {
	}
	ensureReturns struct {
		result1 bool
		result2 error
	}
	ensureReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	GetNameStub        func() string
	getNameMutex       sync.RWMutex
	getNameArgsForCall []struct {
	}
	getNameReturns struct {
		result1 string
	}
	getNameReturnsOnCall map[int]struct {
		result1 string
	}
	IsInactiveStub        func() bool
	isInactiveMutex       sync.RWMutex
	isInactiveArgsForCall []struct {
	}
	isInactiveReturns struct {
		result1 bool
	}
	isInactiveReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLabel) Delete() (bool, error) {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
	}{})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLabel) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeLabel) DeleteCalls(stub func() (bool, error)) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeLabel) DeleteReturns(result1 bool, result2 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeLabel) DeleteReturnsOnCall(i int, result1 bool, result2 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeLabel) Ensure() (bool, error) {
	fake.ensureMutex.Lock()
	ret, specificReturn := fake.ensureReturnsOnCall[len(fake.ensureArgsForCall)]
	fake.ensureArgsForCall = append(fake.ensureArgsForCall, struct {
	}{})
	stub := fake.EnsureStub
	fakeReturns := fake.ensureReturns
	fake.recordInvocation("Ensure", []interface{}{})
	fake.ensureMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLabel) EnsureCallCount() int {
	fake.ensureMutex.RLock()
	defer fake.ensureMutex.RUnlock()
	return len(fake.ensureArgsForCall)
}

func (fake *FakeLabel) EnsureCalls(stub func() (bool, error)) {
	fake.ensureMutex.Lock()
	defer fake.ensureMutex.Unlock()
	fake.EnsureStub = stub
}

func (fake *FakeLabel) EnsureReturns(result1 bool, result2 error) {
	fake.ensureMutex.Lock()
	defer fake.ensureMutex.Unlock()
	fake.EnsureStub = nil
	fake.ensureReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeLabel) EnsureReturnsOnCall(i int, result1 bool, result2 error) {
	fake.ensureMutex.Lock()
	defer fake.ensureMutex.Unlock()
	fake.EnsureStub = nil
	if fake.ensureReturnsOnCall == nil {
		fake.ensureReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.ensureReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeLabel) GetName() string {
	fake.getNameMutex.Lock()
	ret, specificReturn := fake.getNameReturnsOnCall[len(fake.getNameArgsForCall)]
	fake.getNameArgsForCall = append(fake.getNameArgsForCall, struct {
	}{})
	stub := fake.GetNameStub
	fakeReturns := fake.getNameReturns
	fake.recordInvocation("GetName", []interface{}{})
	fake.getNameMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeLabel) GetNameCallCount() int {
	fake.getNameMutex.RLock()
	defer fake.getNameMutex.RUnlock()
	return len(fake.getNameArgsForCall)
}

func (fake *FakeLabel) GetNameCalls(stub func() string) {
	fake.getNameMutex.Lock()
	defer fake.getNameMutex.Unlock()
	fake.GetNameStub = stub
}

func (fake *FakeLabel) GetNameReturns(result1 string) {
	fake.getNameMutex.Lock()
	defer fake.getNameMutex.Unlock()
	fake.GetNameStub = nil
	fake.getNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeLabel) GetNameReturnsOnCall(i int, result1 string) {
	fake.getNameMutex.Lock()
	defer fake.getNameMutex.Unlock()
	fake.GetNameStub = nil
	if fake.getNameReturnsOnCall == nil {
		fake.getNameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getNameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeLabel) IsInactive() bool {
	fake.isInactiveMutex.Lock()
	ret, specificReturn := fake.isInactiveReturnsOnCall[len(fake.isInactiveArgsForCall)]
	fake.isInactiveArgsForCall = append(fake.isInactiveArgsForCall, struct {
	}{})
	stub := fake.IsInactiveStub
	fakeReturns := fake.isInactiveReturns
	fake.recordInvocation("IsInactive", []interface{}{})
	fake.isInactiveMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeLabel) IsInactiveCallCount() int {
	fake.isInactiveMutex.RLock()
	defer fake.isInactiveMutex.RUnlock()
	return len(fake.isInactiveArgsForCall)
}

func (fake *FakeLabel) IsInactiveCalls(stub func() bool) {
	fake.isInactiveMutex.Lock()
	defer fake.isInactiveMutex.Unlock()
	fake.IsInactiveStub = stub
}

func (fake *FakeLabel) IsInactiveReturns(result1 bool) {
	fake.isInactiveMutex.Lock()
	defer fake.isInactiveMutex.Unlock()
	fake.IsInactiveStub = nil
	fake.isInactiveReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeLabel) IsInactiveReturnsOnCall(i int, result1 bool) {
	fake.isInactiveMutex.Lock()
	defer fake.isInactiveMutex.Unlock()
	fake.IsInactiveStub = nil
	if fake.isInactiveReturnsOnCall == nil {
		fake.isInactiveReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isInactiveReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeLabel) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.ensureMutex.RLock()
	defer fake.ensureMutex.RUnlock()
	fake.getNameMutex.RLock()
	defer fake.getNameMutex.RUnlock()
	fake.isInactiveMutex.RLock()
	defer fake.isInactiveMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLabel) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ core.Label = new(FakeLabel)

// Code generated by counterfeiter. DO NOT EDIT.
package corefakes

import (
	"sync"

	"github.com/ccremer/greposync/core"
)

type FakeLabel struct {
	IsInactiveStub        func() bool
	isInactiveMutex       sync.RWMutex
	isInactiveArgsForCall []struct {
	}
	isInactiveReturns struct {
		result1 bool
	}
	isInactiveReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLabel) IsInactive() bool {
	fake.isInactiveMutex.Lock()
	ret, specificReturn := fake.isInactiveReturnsOnCall[len(fake.isInactiveArgsForCall)]
	fake.isInactiveArgsForCall = append(fake.isInactiveArgsForCall, struct {
	}{})
	stub := fake.IsInactiveStub
	fakeReturns := fake.isInactiveReturns
	fake.recordInvocation("IsInactive", []interface{}{})
	fake.isInactiveMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeLabel) IsInactiveCallCount() int {
	fake.isInactiveMutex.RLock()
	defer fake.isInactiveMutex.RUnlock()
	return len(fake.isInactiveArgsForCall)
}

func (fake *FakeLabel) IsInactiveCalls(stub func() bool) {
	fake.isInactiveMutex.Lock()
	defer fake.isInactiveMutex.Unlock()
	fake.IsInactiveStub = stub
}

func (fake *FakeLabel) IsInactiveReturns(result1 bool) {
	fake.isInactiveMutex.Lock()
	defer fake.isInactiveMutex.Unlock()
	fake.IsInactiveStub = nil
	fake.isInactiveReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeLabel) IsInactiveReturnsOnCall(i int, result1 bool) {
	fake.isInactiveMutex.Lock()
	defer fake.isInactiveMutex.Unlock()
	fake.IsInactiveStub = nil
	if fake.isInactiveReturnsOnCall == nil {
		fake.isInactiveReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isInactiveReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeLabel) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isInactiveMutex.RLock()
	defer fake.isInactiveMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLabel) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ core.Label = new(FakeLabel)

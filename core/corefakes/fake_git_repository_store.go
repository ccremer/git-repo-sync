// Code generated by counterfeiter. DO NOT EDIT.
package corefakes

import (
	"sync"

	"github.com/ccremer/greposync/core"
)

type FakeGitRepositoryStore struct {
	FetchGitRepositoriesStub        func() ([]core.GitRepository, error)
	fetchGitRepositoriesMutex       sync.RWMutex
	fetchGitRepositoriesArgsForCall []struct {
	}
	fetchGitRepositoriesReturns struct {
		result1 []core.GitRepository
		result2 error
	}
	fetchGitRepositoriesReturnsOnCall map[int]struct {
		result1 []core.GitRepository
		result2 error
	}
	GetSupportedGitHostingProvidersStub        func() map[core.GitHostingProvider]core.GitHostingFacade
	getSupportedGitHostingProvidersMutex       sync.RWMutex
	getSupportedGitHostingProvidersArgsForCall []struct {
	}
	getSupportedGitHostingProvidersReturns struct {
		result1 map[core.GitHostingProvider]core.GitHostingFacade
	}
	getSupportedGitHostingProvidersReturnsOnCall map[int]struct {
		result1 map[core.GitHostingProvider]core.GitHostingFacade
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGitRepositoryStore) FetchGitRepositories() ([]core.GitRepository, error) {
	fake.fetchGitRepositoriesMutex.Lock()
	ret, specificReturn := fake.fetchGitRepositoriesReturnsOnCall[len(fake.fetchGitRepositoriesArgsForCall)]
	fake.fetchGitRepositoriesArgsForCall = append(fake.fetchGitRepositoriesArgsForCall, struct {
	}{})
	stub := fake.FetchGitRepositoriesStub
	fakeReturns := fake.fetchGitRepositoriesReturns
	fake.recordInvocation("FetchGitRepositories", []interface{}{})
	fake.fetchGitRepositoriesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGitRepositoryStore) FetchGitRepositoriesCallCount() int {
	fake.fetchGitRepositoriesMutex.RLock()
	defer fake.fetchGitRepositoriesMutex.RUnlock()
	return len(fake.fetchGitRepositoriesArgsForCall)
}

func (fake *FakeGitRepositoryStore) FetchGitRepositoriesCalls(stub func() ([]core.GitRepository, error)) {
	fake.fetchGitRepositoriesMutex.Lock()
	defer fake.fetchGitRepositoriesMutex.Unlock()
	fake.FetchGitRepositoriesStub = stub
}

func (fake *FakeGitRepositoryStore) FetchGitRepositoriesReturns(result1 []core.GitRepository, result2 error) {
	fake.fetchGitRepositoriesMutex.Lock()
	defer fake.fetchGitRepositoriesMutex.Unlock()
	fake.FetchGitRepositoriesStub = nil
	fake.fetchGitRepositoriesReturns = struct {
		result1 []core.GitRepository
		result2 error
	}{result1, result2}
}

func (fake *FakeGitRepositoryStore) FetchGitRepositoriesReturnsOnCall(i int, result1 []core.GitRepository, result2 error) {
	fake.fetchGitRepositoriesMutex.Lock()
	defer fake.fetchGitRepositoriesMutex.Unlock()
	fake.FetchGitRepositoriesStub = nil
	if fake.fetchGitRepositoriesReturnsOnCall == nil {
		fake.fetchGitRepositoriesReturnsOnCall = make(map[int]struct {
			result1 []core.GitRepository
			result2 error
		})
	}
	fake.fetchGitRepositoriesReturnsOnCall[i] = struct {
		result1 []core.GitRepository
		result2 error
	}{result1, result2}
}

func (fake *FakeGitRepositoryStore) GetSupportedGitHostingProviders() map[core.GitHostingProvider]core.GitHostingFacade {
	fake.getSupportedGitHostingProvidersMutex.Lock()
	ret, specificReturn := fake.getSupportedGitHostingProvidersReturnsOnCall[len(fake.getSupportedGitHostingProvidersArgsForCall)]
	fake.getSupportedGitHostingProvidersArgsForCall = append(fake.getSupportedGitHostingProvidersArgsForCall, struct {
	}{})
	stub := fake.GetSupportedGitHostingProvidersStub
	fakeReturns := fake.getSupportedGitHostingProvidersReturns
	fake.recordInvocation("GetSupportedGitHostingProviders", []interface{}{})
	fake.getSupportedGitHostingProvidersMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGitRepositoryStore) GetSupportedGitHostingProvidersCallCount() int {
	fake.getSupportedGitHostingProvidersMutex.RLock()
	defer fake.getSupportedGitHostingProvidersMutex.RUnlock()
	return len(fake.getSupportedGitHostingProvidersArgsForCall)
}

func (fake *FakeGitRepositoryStore) GetSupportedGitHostingProvidersCalls(stub func() map[core.GitHostingProvider]core.GitHostingFacade) {
	fake.getSupportedGitHostingProvidersMutex.Lock()
	defer fake.getSupportedGitHostingProvidersMutex.Unlock()
	fake.GetSupportedGitHostingProvidersStub = stub
}

func (fake *FakeGitRepositoryStore) GetSupportedGitHostingProvidersReturns(result1 map[core.GitHostingProvider]core.GitHostingFacade) {
	fake.getSupportedGitHostingProvidersMutex.Lock()
	defer fake.getSupportedGitHostingProvidersMutex.Unlock()
	fake.GetSupportedGitHostingProvidersStub = nil
	fake.getSupportedGitHostingProvidersReturns = struct {
		result1 map[core.GitHostingProvider]core.GitHostingFacade
	}{result1}
}

func (fake *FakeGitRepositoryStore) GetSupportedGitHostingProvidersReturnsOnCall(i int, result1 map[core.GitHostingProvider]core.GitHostingFacade) {
	fake.getSupportedGitHostingProvidersMutex.Lock()
	defer fake.getSupportedGitHostingProvidersMutex.Unlock()
	fake.GetSupportedGitHostingProvidersStub = nil
	if fake.getSupportedGitHostingProvidersReturnsOnCall == nil {
		fake.getSupportedGitHostingProvidersReturnsOnCall = make(map[int]struct {
			result1 map[core.GitHostingProvider]core.GitHostingFacade
		})
	}
	fake.getSupportedGitHostingProvidersReturnsOnCall[i] = struct {
		result1 map[core.GitHostingProvider]core.GitHostingFacade
	}{result1}
}

func (fake *FakeGitRepositoryStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchGitRepositoriesMutex.RLock()
	defer fake.fetchGitRepositoriesMutex.RUnlock()
	fake.getSupportedGitHostingProvidersMutex.RLock()
	defer fake.getSupportedGitHostingProvidersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGitRepositoryStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ core.GitRepositoryStore = new(FakeGitRepositoryStore)

// Code generated by counterfeiter. DO NOT EDIT.
package corefakes

import (
	"sync"

	"github.com/ccremer/greposync/core"
)

type FakeTemplateStore struct {
	FetchPullRequestTemplateStub        func() (core.Template, error)
	fetchPullRequestTemplateMutex       sync.RWMutex
	fetchPullRequestTemplateArgsForCall []struct {
	}
	fetchPullRequestTemplateReturns struct {
		result1 core.Template
		result2 error
	}
	fetchPullRequestTemplateReturnsOnCall map[int]struct {
		result1 core.Template
		result2 error
	}
	FetchTemplatesStub        func() ([]core.Template, error)
	fetchTemplatesMutex       sync.RWMutex
	fetchTemplatesArgsForCall []struct {
	}
	fetchTemplatesReturns struct {
		result1 []core.Template
		result2 error
	}
	fetchTemplatesReturnsOnCall map[int]struct {
		result1 []core.Template
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTemplateStore) FetchPullRequestTemplate() (core.Template, error) {
	fake.fetchPullRequestTemplateMutex.Lock()
	ret, specificReturn := fake.fetchPullRequestTemplateReturnsOnCall[len(fake.fetchPullRequestTemplateArgsForCall)]
	fake.fetchPullRequestTemplateArgsForCall = append(fake.fetchPullRequestTemplateArgsForCall, struct {
	}{})
	stub := fake.FetchPullRequestTemplateStub
	fakeReturns := fake.fetchPullRequestTemplateReturns
	fake.recordInvocation("FetchPullRequestTemplate", []interface{}{})
	fake.fetchPullRequestTemplateMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTemplateStore) FetchPullRequestTemplateCallCount() int {
	fake.fetchPullRequestTemplateMutex.RLock()
	defer fake.fetchPullRequestTemplateMutex.RUnlock()
	return len(fake.fetchPullRequestTemplateArgsForCall)
}

func (fake *FakeTemplateStore) FetchPullRequestTemplateCalls(stub func() (core.Template, error)) {
	fake.fetchPullRequestTemplateMutex.Lock()
	defer fake.fetchPullRequestTemplateMutex.Unlock()
	fake.FetchPullRequestTemplateStub = stub
}

func (fake *FakeTemplateStore) FetchPullRequestTemplateReturns(result1 core.Template, result2 error) {
	fake.fetchPullRequestTemplateMutex.Lock()
	defer fake.fetchPullRequestTemplateMutex.Unlock()
	fake.FetchPullRequestTemplateStub = nil
	fake.fetchPullRequestTemplateReturns = struct {
		result1 core.Template
		result2 error
	}{result1, result2}
}

func (fake *FakeTemplateStore) FetchPullRequestTemplateReturnsOnCall(i int, result1 core.Template, result2 error) {
	fake.fetchPullRequestTemplateMutex.Lock()
	defer fake.fetchPullRequestTemplateMutex.Unlock()
	fake.FetchPullRequestTemplateStub = nil
	if fake.fetchPullRequestTemplateReturnsOnCall == nil {
		fake.fetchPullRequestTemplateReturnsOnCall = make(map[int]struct {
			result1 core.Template
			result2 error
		})
	}
	fake.fetchPullRequestTemplateReturnsOnCall[i] = struct {
		result1 core.Template
		result2 error
	}{result1, result2}
}

func (fake *FakeTemplateStore) FetchTemplates() ([]core.Template, error) {
	fake.fetchTemplatesMutex.Lock()
	ret, specificReturn := fake.fetchTemplatesReturnsOnCall[len(fake.fetchTemplatesArgsForCall)]
	fake.fetchTemplatesArgsForCall = append(fake.fetchTemplatesArgsForCall, struct {
	}{})
	stub := fake.FetchTemplatesStub
	fakeReturns := fake.fetchTemplatesReturns
	fake.recordInvocation("FetchTemplates", []interface{}{})
	fake.fetchTemplatesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTemplateStore) FetchTemplatesCallCount() int {
	fake.fetchTemplatesMutex.RLock()
	defer fake.fetchTemplatesMutex.RUnlock()
	return len(fake.fetchTemplatesArgsForCall)
}

func (fake *FakeTemplateStore) FetchTemplatesCalls(stub func() ([]core.Template, error)) {
	fake.fetchTemplatesMutex.Lock()
	defer fake.fetchTemplatesMutex.Unlock()
	fake.FetchTemplatesStub = stub
}

func (fake *FakeTemplateStore) FetchTemplatesReturns(result1 []core.Template, result2 error) {
	fake.fetchTemplatesMutex.Lock()
	defer fake.fetchTemplatesMutex.Unlock()
	fake.FetchTemplatesStub = nil
	fake.fetchTemplatesReturns = struct {
		result1 []core.Template
		result2 error
	}{result1, result2}
}

func (fake *FakeTemplateStore) FetchTemplatesReturnsOnCall(i int, result1 []core.Template, result2 error) {
	fake.fetchTemplatesMutex.Lock()
	defer fake.fetchTemplatesMutex.Unlock()
	fake.FetchTemplatesStub = nil
	if fake.fetchTemplatesReturnsOnCall == nil {
		fake.fetchTemplatesReturnsOnCall = make(map[int]struct {
			result1 []core.Template
			result2 error
		})
	}
	fake.fetchTemplatesReturnsOnCall[i] = struct {
		result1 []core.Template
		result2 error
	}{result1, result2}
}

func (fake *FakeTemplateStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchPullRequestTemplateMutex.RLock()
	defer fake.fetchPullRequestTemplateMutex.RUnlock()
	fake.fetchTemplatesMutex.RLock()
	defer fake.fetchTemplatesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTemplateStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ core.TemplateStore = new(FakeTemplateStore)

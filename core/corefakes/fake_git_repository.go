// Code generated by counterfeiter. DO NOT EDIT.
package corefakes

import (
	"io/fs"
	"sync"

	"github.com/ccremer/greposync/core"
)

type FakeGitRepository struct {
	DeleteFileStub        func(string) error
	deleteFileMutex       sync.RWMutex
	deleteFileArgsForCall []struct {
		arg1 string
	}
	deleteFileReturns struct {
		result1 error
	}
	deleteFileReturnsOnCall map[int]struct {
		result1 error
	}
	EnsureFileStub        func(string, string, fs.FileMode) error
	ensureFileMutex       sync.RWMutex
	ensureFileArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 fs.FileMode
	}
	ensureFileReturns struct {
		result1 error
	}
	ensureFileReturnsOnCall map[int]struct {
		result1 error
	}
	FetchLabelsStub        func() []core.Label
	fetchLabelsMutex       sync.RWMutex
	fetchLabelsArgsForCall []struct {
	}
	fetchLabelsReturns struct {
		result1 []core.Label
	}
	fetchLabelsReturnsOnCall map[int]struct {
		result1 []core.Label
	}
	GetConfigStub        func() core.GitRepositoryConfig
	getConfigMutex       sync.RWMutex
	getConfigArgsForCall []struct {
	}
	getConfigReturns struct {
		result1 core.GitRepositoryConfig
	}
	getConfigReturnsOnCall map[int]struct {
		result1 core.GitRepositoryConfig
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGitRepository) DeleteFile(arg1 string) error {
	fake.deleteFileMutex.Lock()
	ret, specificReturn := fake.deleteFileReturnsOnCall[len(fake.deleteFileArgsForCall)]
	fake.deleteFileArgsForCall = append(fake.deleteFileArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteFileStub
	fakeReturns := fake.deleteFileReturns
	fake.recordInvocation("DeleteFile", []interface{}{arg1})
	fake.deleteFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGitRepository) DeleteFileCallCount() int {
	fake.deleteFileMutex.RLock()
	defer fake.deleteFileMutex.RUnlock()
	return len(fake.deleteFileArgsForCall)
}

func (fake *FakeGitRepository) DeleteFileCalls(stub func(string) error) {
	fake.deleteFileMutex.Lock()
	defer fake.deleteFileMutex.Unlock()
	fake.DeleteFileStub = stub
}

func (fake *FakeGitRepository) DeleteFileArgsForCall(i int) string {
	fake.deleteFileMutex.RLock()
	defer fake.deleteFileMutex.RUnlock()
	argsForCall := fake.deleteFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGitRepository) DeleteFileReturns(result1 error) {
	fake.deleteFileMutex.Lock()
	defer fake.deleteFileMutex.Unlock()
	fake.DeleteFileStub = nil
	fake.deleteFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitRepository) DeleteFileReturnsOnCall(i int, result1 error) {
	fake.deleteFileMutex.Lock()
	defer fake.deleteFileMutex.Unlock()
	fake.DeleteFileStub = nil
	if fake.deleteFileReturnsOnCall == nil {
		fake.deleteFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitRepository) EnsureFile(arg1 string, arg2 string, arg3 fs.FileMode) error {
	fake.ensureFileMutex.Lock()
	ret, specificReturn := fake.ensureFileReturnsOnCall[len(fake.ensureFileArgsForCall)]
	fake.ensureFileArgsForCall = append(fake.ensureFileArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 fs.FileMode
	}{arg1, arg2, arg3})
	stub := fake.EnsureFileStub
	fakeReturns := fake.ensureFileReturns
	fake.recordInvocation("EnsureFile", []interface{}{arg1, arg2, arg3})
	fake.ensureFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGitRepository) EnsureFileCallCount() int {
	fake.ensureFileMutex.RLock()
	defer fake.ensureFileMutex.RUnlock()
	return len(fake.ensureFileArgsForCall)
}

func (fake *FakeGitRepository) EnsureFileCalls(stub func(string, string, fs.FileMode) error) {
	fake.ensureFileMutex.Lock()
	defer fake.ensureFileMutex.Unlock()
	fake.EnsureFileStub = stub
}

func (fake *FakeGitRepository) EnsureFileArgsForCall(i int) (string, string, fs.FileMode) {
	fake.ensureFileMutex.RLock()
	defer fake.ensureFileMutex.RUnlock()
	argsForCall := fake.ensureFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeGitRepository) EnsureFileReturns(result1 error) {
	fake.ensureFileMutex.Lock()
	defer fake.ensureFileMutex.Unlock()
	fake.EnsureFileStub = nil
	fake.ensureFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitRepository) EnsureFileReturnsOnCall(i int, result1 error) {
	fake.ensureFileMutex.Lock()
	defer fake.ensureFileMutex.Unlock()
	fake.EnsureFileStub = nil
	if fake.ensureFileReturnsOnCall == nil {
		fake.ensureFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.ensureFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitRepository) FetchLabels() []core.Label {
	fake.fetchLabelsMutex.Lock()
	ret, specificReturn := fake.fetchLabelsReturnsOnCall[len(fake.fetchLabelsArgsForCall)]
	fake.fetchLabelsArgsForCall = append(fake.fetchLabelsArgsForCall, struct {
	}{})
	stub := fake.FetchLabelsStub
	fakeReturns := fake.fetchLabelsReturns
	fake.recordInvocation("FetchLabels", []interface{}{})
	fake.fetchLabelsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGitRepository) FetchLabelsCallCount() int {
	fake.fetchLabelsMutex.RLock()
	defer fake.fetchLabelsMutex.RUnlock()
	return len(fake.fetchLabelsArgsForCall)
}

func (fake *FakeGitRepository) FetchLabelsCalls(stub func() []core.Label) {
	fake.fetchLabelsMutex.Lock()
	defer fake.fetchLabelsMutex.Unlock()
	fake.FetchLabelsStub = stub
}

func (fake *FakeGitRepository) FetchLabelsReturns(result1 []core.Label) {
	fake.fetchLabelsMutex.Lock()
	defer fake.fetchLabelsMutex.Unlock()
	fake.FetchLabelsStub = nil
	fake.fetchLabelsReturns = struct {
		result1 []core.Label
	}{result1}
}

func (fake *FakeGitRepository) FetchLabelsReturnsOnCall(i int, result1 []core.Label) {
	fake.fetchLabelsMutex.Lock()
	defer fake.fetchLabelsMutex.Unlock()
	fake.FetchLabelsStub = nil
	if fake.fetchLabelsReturnsOnCall == nil {
		fake.fetchLabelsReturnsOnCall = make(map[int]struct {
			result1 []core.Label
		})
	}
	fake.fetchLabelsReturnsOnCall[i] = struct {
		result1 []core.Label
	}{result1}
}

func (fake *FakeGitRepository) GetConfig() core.GitRepositoryConfig {
	fake.getConfigMutex.Lock()
	ret, specificReturn := fake.getConfigReturnsOnCall[len(fake.getConfigArgsForCall)]
	fake.getConfigArgsForCall = append(fake.getConfigArgsForCall, struct {
	}{})
	stub := fake.GetConfigStub
	fakeReturns := fake.getConfigReturns
	fake.recordInvocation("GetConfig", []interface{}{})
	fake.getConfigMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGitRepository) GetConfigCallCount() int {
	fake.getConfigMutex.RLock()
	defer fake.getConfigMutex.RUnlock()
	return len(fake.getConfigArgsForCall)
}

func (fake *FakeGitRepository) GetConfigCalls(stub func() core.GitRepositoryConfig) {
	fake.getConfigMutex.Lock()
	defer fake.getConfigMutex.Unlock()
	fake.GetConfigStub = stub
}

func (fake *FakeGitRepository) GetConfigReturns(result1 core.GitRepositoryConfig) {
	fake.getConfigMutex.Lock()
	defer fake.getConfigMutex.Unlock()
	fake.GetConfigStub = nil
	fake.getConfigReturns = struct {
		result1 core.GitRepositoryConfig
	}{result1}
}

func (fake *FakeGitRepository) GetConfigReturnsOnCall(i int, result1 core.GitRepositoryConfig) {
	fake.getConfigMutex.Lock()
	defer fake.getConfigMutex.Unlock()
	fake.GetConfigStub = nil
	if fake.getConfigReturnsOnCall == nil {
		fake.getConfigReturnsOnCall = make(map[int]struct {
			result1 core.GitRepositoryConfig
		})
	}
	fake.getConfigReturnsOnCall[i] = struct {
		result1 core.GitRepositoryConfig
	}{result1}
}

func (fake *FakeGitRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteFileMutex.RLock()
	defer fake.deleteFileMutex.RUnlock()
	fake.ensureFileMutex.RLock()
	defer fake.ensureFileMutex.RUnlock()
	fake.fetchLabelsMutex.RLock()
	defer fake.fetchLabelsMutex.RUnlock()
	fake.getConfigMutex.RLock()
	defer fake.getConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGitRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ core.GitRepository = new(FakeGitRepository)

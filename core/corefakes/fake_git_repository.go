// Code generated by counterfeiter. DO NOT EDIT.
package corefakes

import (
	"io/fs"
	"sync"

	"github.com/ccremer/greposync/core"
)

type FakeGitRepository struct {
	DeleteFileStub        func(string) error
	deleteFileMutex       sync.RWMutex
	deleteFileArgsForCall []struct {
		arg1 string
	}
	deleteFileReturns struct {
		result1 error
	}
	deleteFileReturnsOnCall map[int]struct {
		result1 error
	}
	EnsureFileStub        func(string, string, fs.FileMode) error
	ensureFileMutex       sync.RWMutex
	ensureFileArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 fs.FileMode
	}
	ensureFileReturns struct {
		result1 error
	}
	ensureFileReturnsOnCall map[int]struct {
		result1 error
	}
	EnsurePullRequestStub        func(core.PullRequest) error
	ensurePullRequestMutex       sync.RWMutex
	ensurePullRequestArgsForCall []struct {
		arg1 core.PullRequest
	}
	ensurePullRequestReturns struct {
		result1 error
	}
	ensurePullRequestReturnsOnCall map[int]struct {
		result1 error
	}
	FetchPullRequestStub        func() (core.PullRequest, error)
	fetchPullRequestMutex       sync.RWMutex
	fetchPullRequestArgsForCall []struct {
	}
	fetchPullRequestReturns struct {
		result1 core.PullRequest
		result2 error
	}
	fetchPullRequestReturnsOnCall map[int]struct {
		result1 core.PullRequest
		result2 error
	}
	GetConfigStub        func() core.GitRepositoryConfig
	getConfigMutex       sync.RWMutex
	getConfigArgsForCall []struct {
	}
	getConfigReturns struct {
		result1 core.GitRepositoryConfig
	}
	getConfigReturnsOnCall map[int]struct {
		result1 core.GitRepositoryConfig
	}
	GetLabelsStub        func() []core.Label
	getLabelsMutex       sync.RWMutex
	getLabelsArgsForCall []struct {
	}
	getLabelsReturns struct {
		result1 []core.Label
	}
	getLabelsReturnsOnCall map[int]struct {
		result1 []core.Label
	}
	NewPullRequestStub        func() core.PullRequest
	newPullRequestMutex       sync.RWMutex
	newPullRequestArgsForCall []struct {
	}
	newPullRequestReturns struct {
		result1 core.PullRequest
	}
	newPullRequestReturnsOnCall map[int]struct {
		result1 core.PullRequest
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGitRepository) DeleteFile(arg1 string) error {
	fake.deleteFileMutex.Lock()
	ret, specificReturn := fake.deleteFileReturnsOnCall[len(fake.deleteFileArgsForCall)]
	fake.deleteFileArgsForCall = append(fake.deleteFileArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteFileStub
	fakeReturns := fake.deleteFileReturns
	fake.recordInvocation("DeleteFile", []interface{}{arg1})
	fake.deleteFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGitRepository) DeleteFileCallCount() int {
	fake.deleteFileMutex.RLock()
	defer fake.deleteFileMutex.RUnlock()
	return len(fake.deleteFileArgsForCall)
}

func (fake *FakeGitRepository) DeleteFileCalls(stub func(string) error) {
	fake.deleteFileMutex.Lock()
	defer fake.deleteFileMutex.Unlock()
	fake.DeleteFileStub = stub
}

func (fake *FakeGitRepository) DeleteFileArgsForCall(i int) string {
	fake.deleteFileMutex.RLock()
	defer fake.deleteFileMutex.RUnlock()
	argsForCall := fake.deleteFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGitRepository) DeleteFileReturns(result1 error) {
	fake.deleteFileMutex.Lock()
	defer fake.deleteFileMutex.Unlock()
	fake.DeleteFileStub = nil
	fake.deleteFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitRepository) DeleteFileReturnsOnCall(i int, result1 error) {
	fake.deleteFileMutex.Lock()
	defer fake.deleteFileMutex.Unlock()
	fake.DeleteFileStub = nil
	if fake.deleteFileReturnsOnCall == nil {
		fake.deleteFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitRepository) EnsureFile(arg1 string, arg2 string, arg3 fs.FileMode) error {
	fake.ensureFileMutex.Lock()
	ret, specificReturn := fake.ensureFileReturnsOnCall[len(fake.ensureFileArgsForCall)]
	fake.ensureFileArgsForCall = append(fake.ensureFileArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 fs.FileMode
	}{arg1, arg2, arg3})
	stub := fake.EnsureFileStub
	fakeReturns := fake.ensureFileReturns
	fake.recordInvocation("EnsureFile", []interface{}{arg1, arg2, arg3})
	fake.ensureFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGitRepository) EnsureFileCallCount() int {
	fake.ensureFileMutex.RLock()
	defer fake.ensureFileMutex.RUnlock()
	return len(fake.ensureFileArgsForCall)
}

func (fake *FakeGitRepository) EnsureFileCalls(stub func(string, string, fs.FileMode) error) {
	fake.ensureFileMutex.Lock()
	defer fake.ensureFileMutex.Unlock()
	fake.EnsureFileStub = stub
}

func (fake *FakeGitRepository) EnsureFileArgsForCall(i int) (string, string, fs.FileMode) {
	fake.ensureFileMutex.RLock()
	defer fake.ensureFileMutex.RUnlock()
	argsForCall := fake.ensureFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeGitRepository) EnsureFileReturns(result1 error) {
	fake.ensureFileMutex.Lock()
	defer fake.ensureFileMutex.Unlock()
	fake.EnsureFileStub = nil
	fake.ensureFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitRepository) EnsureFileReturnsOnCall(i int, result1 error) {
	fake.ensureFileMutex.Lock()
	defer fake.ensureFileMutex.Unlock()
	fake.EnsureFileStub = nil
	if fake.ensureFileReturnsOnCall == nil {
		fake.ensureFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.ensureFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitRepository) EnsurePullRequest(arg1 core.PullRequest) error {
	fake.ensurePullRequestMutex.Lock()
	ret, specificReturn := fake.ensurePullRequestReturnsOnCall[len(fake.ensurePullRequestArgsForCall)]
	fake.ensurePullRequestArgsForCall = append(fake.ensurePullRequestArgsForCall, struct {
		arg1 core.PullRequest
	}{arg1})
	stub := fake.EnsurePullRequestStub
	fakeReturns := fake.ensurePullRequestReturns
	fake.recordInvocation("EnsurePullRequest", []interface{}{arg1})
	fake.ensurePullRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGitRepository) EnsurePullRequestCallCount() int {
	fake.ensurePullRequestMutex.RLock()
	defer fake.ensurePullRequestMutex.RUnlock()
	return len(fake.ensurePullRequestArgsForCall)
}

func (fake *FakeGitRepository) EnsurePullRequestCalls(stub func(core.PullRequest) error) {
	fake.ensurePullRequestMutex.Lock()
	defer fake.ensurePullRequestMutex.Unlock()
	fake.EnsurePullRequestStub = stub
}

func (fake *FakeGitRepository) EnsurePullRequestArgsForCall(i int) core.PullRequest {
	fake.ensurePullRequestMutex.RLock()
	defer fake.ensurePullRequestMutex.RUnlock()
	argsForCall := fake.ensurePullRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGitRepository) EnsurePullRequestReturns(result1 error) {
	fake.ensurePullRequestMutex.Lock()
	defer fake.ensurePullRequestMutex.Unlock()
	fake.EnsurePullRequestStub = nil
	fake.ensurePullRequestReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitRepository) EnsurePullRequestReturnsOnCall(i int, result1 error) {
	fake.ensurePullRequestMutex.Lock()
	defer fake.ensurePullRequestMutex.Unlock()
	fake.EnsurePullRequestStub = nil
	if fake.ensurePullRequestReturnsOnCall == nil {
		fake.ensurePullRequestReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.ensurePullRequestReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitRepository) FetchPullRequest() (core.PullRequest, error) {
	fake.fetchPullRequestMutex.Lock()
	ret, specificReturn := fake.fetchPullRequestReturnsOnCall[len(fake.fetchPullRequestArgsForCall)]
	fake.fetchPullRequestArgsForCall = append(fake.fetchPullRequestArgsForCall, struct {
	}{})
	stub := fake.FetchPullRequestStub
	fakeReturns := fake.fetchPullRequestReturns
	fake.recordInvocation("FetchPullRequest", []interface{}{})
	fake.fetchPullRequestMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGitRepository) FetchPullRequestCallCount() int {
	fake.fetchPullRequestMutex.RLock()
	defer fake.fetchPullRequestMutex.RUnlock()
	return len(fake.fetchPullRequestArgsForCall)
}

func (fake *FakeGitRepository) FetchPullRequestCalls(stub func() (core.PullRequest, error)) {
	fake.fetchPullRequestMutex.Lock()
	defer fake.fetchPullRequestMutex.Unlock()
	fake.FetchPullRequestStub = stub
}

func (fake *FakeGitRepository) FetchPullRequestReturns(result1 core.PullRequest, result2 error) {
	fake.fetchPullRequestMutex.Lock()
	defer fake.fetchPullRequestMutex.Unlock()
	fake.FetchPullRequestStub = nil
	fake.fetchPullRequestReturns = struct {
		result1 core.PullRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeGitRepository) FetchPullRequestReturnsOnCall(i int, result1 core.PullRequest, result2 error) {
	fake.fetchPullRequestMutex.Lock()
	defer fake.fetchPullRequestMutex.Unlock()
	fake.FetchPullRequestStub = nil
	if fake.fetchPullRequestReturnsOnCall == nil {
		fake.fetchPullRequestReturnsOnCall = make(map[int]struct {
			result1 core.PullRequest
			result2 error
		})
	}
	fake.fetchPullRequestReturnsOnCall[i] = struct {
		result1 core.PullRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeGitRepository) GetConfig() core.GitRepositoryConfig {
	fake.getConfigMutex.Lock()
	ret, specificReturn := fake.getConfigReturnsOnCall[len(fake.getConfigArgsForCall)]
	fake.getConfigArgsForCall = append(fake.getConfigArgsForCall, struct {
	}{})
	stub := fake.GetConfigStub
	fakeReturns := fake.getConfigReturns
	fake.recordInvocation("GetConfig", []interface{}{})
	fake.getConfigMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGitRepository) GetConfigCallCount() int {
	fake.getConfigMutex.RLock()
	defer fake.getConfigMutex.RUnlock()
	return len(fake.getConfigArgsForCall)
}

func (fake *FakeGitRepository) GetConfigCalls(stub func() core.GitRepositoryConfig) {
	fake.getConfigMutex.Lock()
	defer fake.getConfigMutex.Unlock()
	fake.GetConfigStub = stub
}

func (fake *FakeGitRepository) GetConfigReturns(result1 core.GitRepositoryConfig) {
	fake.getConfigMutex.Lock()
	defer fake.getConfigMutex.Unlock()
	fake.GetConfigStub = nil
	fake.getConfigReturns = struct {
		result1 core.GitRepositoryConfig
	}{result1}
}

func (fake *FakeGitRepository) GetConfigReturnsOnCall(i int, result1 core.GitRepositoryConfig) {
	fake.getConfigMutex.Lock()
	defer fake.getConfigMutex.Unlock()
	fake.GetConfigStub = nil
	if fake.getConfigReturnsOnCall == nil {
		fake.getConfigReturnsOnCall = make(map[int]struct {
			result1 core.GitRepositoryConfig
		})
	}
	fake.getConfigReturnsOnCall[i] = struct {
		result1 core.GitRepositoryConfig
	}{result1}
}

func (fake *FakeGitRepository) GetLabels() []core.Label {
	fake.getLabelsMutex.Lock()
	ret, specificReturn := fake.getLabelsReturnsOnCall[len(fake.getLabelsArgsForCall)]
	fake.getLabelsArgsForCall = append(fake.getLabelsArgsForCall, struct {
	}{})
	stub := fake.GetLabelsStub
	fakeReturns := fake.getLabelsReturns
	fake.recordInvocation("GetLabels", []interface{}{})
	fake.getLabelsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGitRepository) GetLabelsCallCount() int {
	fake.getLabelsMutex.RLock()
	defer fake.getLabelsMutex.RUnlock()
	return len(fake.getLabelsArgsForCall)
}

func (fake *FakeGitRepository) GetLabelsCalls(stub func() []core.Label) {
	fake.getLabelsMutex.Lock()
	defer fake.getLabelsMutex.Unlock()
	fake.GetLabelsStub = stub
}

func (fake *FakeGitRepository) GetLabelsReturns(result1 []core.Label) {
	fake.getLabelsMutex.Lock()
	defer fake.getLabelsMutex.Unlock()
	fake.GetLabelsStub = nil
	fake.getLabelsReturns = struct {
		result1 []core.Label
	}{result1}
}

func (fake *FakeGitRepository) GetLabelsReturnsOnCall(i int, result1 []core.Label) {
	fake.getLabelsMutex.Lock()
	defer fake.getLabelsMutex.Unlock()
	fake.GetLabelsStub = nil
	if fake.getLabelsReturnsOnCall == nil {
		fake.getLabelsReturnsOnCall = make(map[int]struct {
			result1 []core.Label
		})
	}
	fake.getLabelsReturnsOnCall[i] = struct {
		result1 []core.Label
	}{result1}
}

func (fake *FakeGitRepository) NewPullRequest() core.PullRequest {
	fake.newPullRequestMutex.Lock()
	ret, specificReturn := fake.newPullRequestReturnsOnCall[len(fake.newPullRequestArgsForCall)]
	fake.newPullRequestArgsForCall = append(fake.newPullRequestArgsForCall, struct {
	}{})
	stub := fake.NewPullRequestStub
	fakeReturns := fake.newPullRequestReturns
	fake.recordInvocation("NewPullRequest", []interface{}{})
	fake.newPullRequestMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGitRepository) NewPullRequestCallCount() int {
	fake.newPullRequestMutex.RLock()
	defer fake.newPullRequestMutex.RUnlock()
	return len(fake.newPullRequestArgsForCall)
}

func (fake *FakeGitRepository) NewPullRequestCalls(stub func() core.PullRequest) {
	fake.newPullRequestMutex.Lock()
	defer fake.newPullRequestMutex.Unlock()
	fake.NewPullRequestStub = stub
}

func (fake *FakeGitRepository) NewPullRequestReturns(result1 core.PullRequest) {
	fake.newPullRequestMutex.Lock()
	defer fake.newPullRequestMutex.Unlock()
	fake.NewPullRequestStub = nil
	fake.newPullRequestReturns = struct {
		result1 core.PullRequest
	}{result1}
}

func (fake *FakeGitRepository) NewPullRequestReturnsOnCall(i int, result1 core.PullRequest) {
	fake.newPullRequestMutex.Lock()
	defer fake.newPullRequestMutex.Unlock()
	fake.NewPullRequestStub = nil
	if fake.newPullRequestReturnsOnCall == nil {
		fake.newPullRequestReturnsOnCall = make(map[int]struct {
			result1 core.PullRequest
		})
	}
	fake.newPullRequestReturnsOnCall[i] = struct {
		result1 core.PullRequest
	}{result1}
}

func (fake *FakeGitRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteFileMutex.RLock()
	defer fake.deleteFileMutex.RUnlock()
	fake.ensureFileMutex.RLock()
	defer fake.ensureFileMutex.RUnlock()
	fake.ensurePullRequestMutex.RLock()
	defer fake.ensurePullRequestMutex.RUnlock()
	fake.fetchPullRequestMutex.RLock()
	defer fake.fetchPullRequestMutex.RUnlock()
	fake.getConfigMutex.RLock()
	defer fake.getConfigMutex.RUnlock()
	fake.getLabelsMutex.RLock()
	defer fake.getLabelsMutex.RUnlock()
	fake.newPullRequestMutex.RLock()
	defer fake.newPullRequestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGitRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ core.GitRepository = new(FakeGitRepository)

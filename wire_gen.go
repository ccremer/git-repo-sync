// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/ccremer/greposync/cfg"
	"github.com/ccremer/greposync/cli"
	"github.com/ccremer/greposync/core"
	"github.com/ccremer/greposync/core/gitrepo"
	"github.com/ccremer/greposync/pkg/githosting/github"
	"github.com/ccremer/greposync/pkg/repository"
)

// Injectors from wire.go:

func initInjector() *injector {
	versionInfo := _wireVersionInfoValue
	configuration := cfg.NewDefaultConfig()
	app := cli.NewApp(versionInfo, configuration)
	providerMap := newGitProviders()
	repositoryStore := repository.NewRepositoryStore(configuration, providerMap)
	prepareWorkspaceHandler := gitrepo.NewPrepareWorkspaceHandler(repositoryStore)
	mainInjector := NewInjector(app, prepareWorkspaceHandler)
	return mainInjector
}

var (
	_wireVersionInfoValue = cli.VersionInfo{Version: version, Commit: commit, Date: date}
)

// wire.go:

type injector struct {
	prepareWorkspaceHandler *gitrepo.PrepareWorkspaceHandler
	app                     *cli.App
}

func NewInjector(
	app *cli.App,
	pwh *gitrepo.PrepareWorkspaceHandler) *injector {
	i := &injector{
		prepareWorkspaceHandler: pwh,
		app:                     app,
	}
	return i
}

func (i *injector) RegisterHandlers() {
	core.RegisterHandler(gitrepo.PrepareWorkspaceEvent, i.prepareWorkspaceHandler)
}

func (i *injector) RunApp() {
	i.app.Run()
}

func newGitProviders() repository.ProviderMap {
	return repository.ProviderMap{github.GitHubProviderKey: github.NewRemote()}
}

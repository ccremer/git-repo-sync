// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/ccremer/greposync/cfg"
	"github.com/ccremer/greposync/cli"
	"github.com/ccremer/greposync/cli/labels"
	"github.com/ccremer/greposync/cli/update"
	"github.com/ccremer/greposync/infrastructure/githosting/github"
	"github.com/ccremer/greposync/infrastructure/repositorystore"
	"github.com/ccremer/greposync/infrastructure/templateengine/gotemplate"
	"github.com/ccremer/greposync/infrastructure/valuestore"
	"github.com/ccremer/greposync/pkg/repository"
)

// Injectors from wire.go:

func initInjector() *injector {
	versionInfo := _wireVersionInfoValue
	configuration := cfg.NewDefaultConfig()
	ghRemote := github.NewRemote()
	providerMap := newGitProviders(ghRemote)
	repositoryStore := repository.NewRepositoryStore(configuration, providerMap)
	command := labels.NewCommand(configuration, repositoryStore)
	goTemplateEngine := gotemplate.NewEngine()
	repositorystoreRepositoryStore := repositorystore.NewRepositoryStore()
	goTemplateStore := gotemplate.NewTemplateStore()
	koanfValueStore := valuestore.NewValueStore()
	appService := update.NewConfigurator(goTemplateEngine, repositorystoreRepositoryStore, goTemplateStore, koanfValueStore)
	updateCommand := update.NewCommand(configuration, appService)
	app := cli.NewApp(versionInfo, configuration, command, updateCommand)
	mainInjector := NewInjector(app)
	return mainInjector
}

var (
	_wireVersionInfoValue = cli.VersionInfo{Version: version, Commit: commit, Date: date}
)

// wire.go:

type injector struct {
	app *cli.App
}

func NewInjector(
	app *cli.App,
) *injector {
	i := &injector{
		app: app,
	}
	return i
}

func (i *injector) RunApp() {
	i.app.Run()
}

func newGitProviders(ghRemote *github.GhRemote) repository.ProviderMap {
	return repository.ProviderMap{github.GitHubProviderKey: ghRemote}
}
